{"ast":null,"code":"import * as types from '../actions/actionTypes';\nvar id = '';\nvar index = -1;\n\nvar ranDomId = () => {\n  return Math.floor(Math.random() * 1000000);\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initState = data ? data : [];\n\nvar rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: ranDomId(),\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      id = action.id;\n      index = state.findIndex(x => x.id === id); // state[index].status = !state[index].status\n\n      state[index] = { ...state[index],\n        status: !state[index].status\n      };\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      var curentTasks = state.filter(x => x.id !== action.id); // var index = state.findIndex(x => x.id === id)\n\n      state = curentTasks;\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["D:/Web/React/reactnew/src/store/reducers/tasks.js"],"names":["types","id","index","ranDomId","Math","floor","random","data","JSON","parse","localStorage","getItem","initState","rootReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","name","task","status","push","setItem","stringify","UPDATE_STATUS_TASK","findIndex","x","DELETE_TASK","curentTasks","filter"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;AAGA,IAAIC,EAAE,GAAG,EAAT;AACA,IAAIC,KAAK,GAAG,CAAC,CAAb;;AACA,IAAIC,QAAQ,GAAG,MAAM;AACjB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAP;AACH,CAFD;;AAGA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AAEA,IAAIC,SAAS,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAA9B;;AACA,IAAIM,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBF,SAAsB;AAAA,MAAXG,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKhB,KAAK,CAACiB,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKd,KAAK,CAACkB,QAAX;AACI,UAAIC,OAAO,GAAG;AACVlB,QAAAA,EAAE,EAAEE,QAAQ,EADF;AAEViB,QAAAA,IAAI,EAAEL,MAAM,CAACM,IAAP,CAAYD,IAFR;AAGVE,QAAAA,MAAM,EAAEP,MAAM,CAACM,IAAP,CAAYC,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHrC,OAAd;AAKAR,MAAAA,KAAK,CAACS,IAAN,CAAWJ,OAAX;AACAT,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BhB,IAAI,CAACiB,SAAL,CAAeX,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKd,KAAK,CAAC0B,kBAAX;AACIzB,MAAAA,EAAE,GAAGc,MAAM,CAACd,EAAZ;AACAC,MAAAA,KAAK,GAAGY,KAAK,CAACa,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAAC3B,EAAF,KAASA,EAA9B,CAAR,CAFJ,CAGI;;AACAa,MAAAA,KAAK,CAACZ,KAAD,CAAL,GAAe,EACX,GAAGY,KAAK,CAACZ,KAAD,CADG;AAEXoB,QAAAA,MAAM,EAAE,CAACR,KAAK,CAACZ,KAAD,CAAL,CAAaoB;AAFX,OAAf;AAIAZ,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BhB,IAAI,CAACiB,SAAL,CAAeX,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AAEJ,SAAKd,KAAK,CAAC6B,WAAX;AAEI,UAAIC,WAAW,GAAGhB,KAAK,CAACiB,MAAN,CAAaH,CAAC,IAAIA,CAAC,CAAC3B,EAAF,KAASc,MAAM,CAACd,EAAlC,CAAlB,CAFJ,CAGI;;AACAa,MAAAA,KAAK,GAAGgB,WAAR;AACApB,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BhB,IAAI,CAACiB,SAAL,CAAeX,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ;AACI,aAAOA,KAAP;AA/BR;AAiCH,CAlCD;;AAmCA,eAAeD,WAAf","sourcesContent":["import * as types from '../actions/actionTypes'\r\n\r\n\r\nvar id = '';\r\nvar index = -1\r\nvar ranDomId = () => {\r\n    return Math.floor(Math.random() * 1000000);\r\n}\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\n\r\nvar initState = data ? data : []\r\nvar rootReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.ADD_TASK:\r\n            var newTask = {\r\n                id: ranDomId(),\r\n                name: action.task.name,\r\n                status: action.task.status === 'true' ? true : false\r\n            }\r\n            state.push(newTask)\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n        case types.UPDATE_STATUS_TASK:\r\n            id = action.id\r\n            index = state.findIndex(x => x.id === id);\r\n            // state[index].status = !state[index].status\r\n            state[index] = {\r\n                ...state[index],\r\n                status: !state[index].status\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n\r\n        case types.DELETE_TASK:\r\n\r\n            var curentTasks = state.filter(x => x.id !== action.id)\r\n            // var index = state.findIndex(x => x.id === id)\r\n            state = curentTasks\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state]\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}