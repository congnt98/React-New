{"ast":null,"code":"var _this = this;\n\nimport * as types from '../actions/actionTypes';\n\nvar id = () => {\n  return Math.floor(Math.random() * 1000000);\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initState = data ? data : [];\n\nvar rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.ADD_TASK:\n      var newTask = {\n        id: id,\n        name: action.task.name,\n        status: action.task.status === 'true' ? true : false\n      };\n      state.push(newTask);\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      console.log(action);\n      var index = tasks.findIndex(x => x.id === id); // if (tasks[index].status === true) {\n      //     tasks[index].status = false\n      // }\n      // else {\n      //     tasks[index].status = true\n      // }\n\n      tasks[index].status = !tasks[index].status;\n\n      _this.setState({\n        tasks: tasks\n      });\n\n      localStorage.setItem('tasks', JSON.stringify(tasks));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["D:/Web/React/reactnew/src/store/reducers/tasks.js"],"names":["types","id","Math","floor","random","data","JSON","parse","localStorage","getItem","initState","rootReducer","state","action","type","LIST_ALL","ADD_TASK","newTask","name","task","status","push","setItem","stringify","UPDATE_STATUS_TASK","console","log","index","tasks","findIndex","x","setState"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;;AAGA,IAAIC,EAAE,GAAG,MAAM;AACX,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAP;AACH,CAFD;;AAGA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AAEA,IAAIC,SAAS,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAA9B;;AACA,IAAIM,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBF,SAAsB;AAAA,MAAXG,MAAW;;AAC7C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKd,KAAK,CAACe,QAAX;AACI,aAAOH,KAAP;;AACJ,SAAKZ,KAAK,CAACgB,QAAX;AACI,UAAIC,OAAO,GAAG;AACVhB,QAAAA,EAAE,EAAEA,EADM;AAEViB,QAAAA,IAAI,EAAEL,MAAM,CAACM,IAAP,CAAYD,IAFR;AAGVE,QAAAA,MAAM,EAAEP,MAAM,CAACM,IAAP,CAAYC,MAAZ,KAAuB,MAAvB,GAAgC,IAAhC,GAAuC;AAHrC,OAAd;AAKAR,MAAAA,KAAK,CAACS,IAAN,CAAWJ,OAAX;AACAT,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BhB,IAAI,CAACiB,SAAL,CAAeX,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKZ,KAAK,CAACwB,kBAAX;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AAGA,UAAIc,KAAK,GAAGC,KAAK,CAACC,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAAC7B,EAAF,KAASA,EAA9B,CAAZ,CAJJ,CAKI;AACA;AACA;AACA;AACA;AACA;;AACA2B,MAAAA,KAAK,CAACD,KAAD,CAAL,CAAaP,MAAb,GAAsB,CAACQ,KAAK,CAACD,KAAD,CAAL,CAAaP,MAApC;;AACA,MAAA,KAAI,CAACW,QAAL,CAAc;AACVH,QAAAA,KAAK,EAAEA;AADG,OAAd;;AAGApB,MAAAA,YAAY,CAACc,OAAb,CAAqB,OAArB,EAA8BhB,IAAI,CAACiB,SAAL,CAAeK,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGhB,KAAJ,CAAP;;AAEJ;AACI,aAAOA,KAAP;AA/BR;AAiCH,CAlCD;;AAmCA,eAAeD,WAAf","sourcesContent":["import * as types from '../actions/actionTypes'\r\n\r\n\r\nvar id = () => {\r\n    return Math.floor(Math.random() * 1000000);\r\n}\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\n\r\nvar initState = data ? data : []\r\nvar rootReducer = (state = initState, action) => {\r\n    switch (action.type) {\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.ADD_TASK:\r\n            var newTask = {\r\n                id: id,\r\n                name: action.task.name,\r\n                status: action.task.status === 'true' ? true : false\r\n            }\r\n            state.push(newTask)\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n        case types.UPDATE_STATUS_TASK:\r\n            console.log(action);\r\n\r\n\r\n            var index = tasks.findIndex(x => x.id === id);\r\n            // if (tasks[index].status === true) {\r\n            //     tasks[index].status = false\r\n            // }\r\n            // else {\r\n            //     tasks[index].status = true\r\n            // }\r\n            tasks[index].status = !tasks[index].status\r\n            this.setState({\r\n                tasks: tasks\r\n            })\r\n            localStorage.setItem('tasks', JSON.stringify(tasks))\r\n            return [...state];\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}