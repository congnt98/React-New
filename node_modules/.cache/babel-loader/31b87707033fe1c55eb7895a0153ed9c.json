{"ast":null,"code":"import * as types from '../actions/actionTypes';\n\nvar ranDomId = () => {\n  return Math.floor(Math.random() * 1000000);\n};\n\nvar data = JSON.parse(localStorage.getItem('tasks'));\nvar initState = data ? data : [];\n\nvar rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  var id = '';\n  var index = -1;\n\n  switch (action.type) {\n    case types.LIST_ALL:\n      return state;\n\n    case types.SAVE_TASK:\n      var task = {\n        id: action.task.id,\n        name: action.task.name,\n        status: action.task.status === 'true' || action.task.status === true ? true : false\n      };\n\n      if (!task.id) {\n        task.id = ranDomId();\n        state.push(task); // [...state,task]\n      } else {\n        index = state.findIndex(x => x.id === task.id);\n        state[index] = task;\n      }\n\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.UPDATE_STATUS_TASK:\n      id = action.id;\n      index = state.findIndex(x => x.id === id); // state[index].status = !state[index].status\n\n      state[index] = { ...state[index],\n        status: !state[index].status\n      };\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    case types.DELETE_TASK:\n      var curentTasks = state.filter(x => x.id !== action.id); // var index = state.findIndex(x => x.id === id)\n\n      state = curentTasks;\n      localStorage.setItem('tasks', JSON.stringify(state));\n      return [...state];\n\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["D:/Web/React/reactnew/src/store/reducers/tasks.js"],"names":["types","ranDomId","Math","floor","random","data","JSON","parse","localStorage","getItem","initState","rootReducer","state","action","id","index","type","LIST_ALL","SAVE_TASK","task","name","status","push","findIndex","x","setItem","stringify","UPDATE_STATUS_TASK","DELETE_TASK","curentTasks","filter"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,wBAAvB;;AAEA,IAAIC,QAAQ,GAAG,MAAM;AACjB,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,OAA3B,CAAP;AACH,CAFD;;AAGA,IAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAX,CAAX;AACA,IAAIC,SAAS,GAAGL,IAAI,GAAGA,IAAH,GAAU,EAA9B;;AACA,IAAIM,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBF,SAAsB;AAAA,MAAXG,MAAW;AAC7C,MAAIC,EAAE,GAAG,EAAT;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;;AACA,UAAQF,MAAM,CAACG,IAAf;AACI,SAAKhB,KAAK,CAACiB,QAAX;AACI,aAAOL,KAAP;;AACJ,SAAKZ,KAAK,CAACkB,SAAX;AACI,UAAIC,IAAI,GAAG;AACPL,QAAAA,EAAE,EAAED,MAAM,CAACM,IAAP,CAAYL,EADT;AAEPM,QAAAA,IAAI,EAAEP,MAAM,CAACM,IAAP,CAAYC,IAFX;AAGPC,QAAAA,MAAM,EAAGR,MAAM,CAACM,IAAP,CAAYE,MAAZ,KAAuB,MAAvB,IAAiCR,MAAM,CAACM,IAAP,CAAYE,MAAZ,KAAuB,IAAzD,GAAiE,IAAjE,GAAwE;AAHzE,OAAX;;AAKA,UAAI,CAACF,IAAI,CAACL,EAAV,EAAc;AACVK,QAAAA,IAAI,CAACL,EAAL,GAAUb,QAAQ,EAAlB;AACAW,QAAAA,KAAK,CAACU,IAAN,CAAWH,IAAX,EAFU,CAEO;AACpB,OAHD,MAGO;AACHJ,QAAAA,KAAK,GAAGH,KAAK,CAACW,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACV,EAAF,KAASK,IAAI,CAACL,EAAnC,CAAR;AACAF,QAAAA,KAAK,CAACG,KAAD,CAAL,GAAeI,IAAf;AAEH;;AACDX,MAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAed,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKZ,KAAK,CAAC2B,kBAAX;AACIb,MAAAA,EAAE,GAAGD,MAAM,CAACC,EAAZ;AACAC,MAAAA,KAAK,GAAGH,KAAK,CAACW,SAAN,CAAgBC,CAAC,IAAIA,CAAC,CAACV,EAAF,KAASA,EAA9B,CAAR,CAFJ,CAGI;;AACAF,MAAAA,KAAK,CAACG,KAAD,CAAL,GAAe,EACX,GAAGH,KAAK,CAACG,KAAD,CADG;AAEXM,QAAAA,MAAM,EAAE,CAACT,KAAK,CAACG,KAAD,CAAL,CAAaM;AAFX,OAAf;AAIAb,MAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAed,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AACJ,SAAKZ,KAAK,CAAC4B,WAAX;AACI,UAAIC,WAAW,GAAGjB,KAAK,CAACkB,MAAN,CAAaN,CAAC,IAAIA,CAAC,CAACV,EAAF,KAASD,MAAM,CAACC,EAAlC,CAAlB,CADJ,CAEI;;AACAF,MAAAA,KAAK,GAAGiB,WAAR;AACArB,MAAAA,YAAY,CAACiB,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAed,KAAf,CAA9B;AACA,aAAO,CAAC,GAAGA,KAAJ,CAAP;;AAGJ;AACI,aAAOA,KAAP;AAtCR;AAwCH,CA3CD;;AA4CA,eAAeD,WAAf","sourcesContent":["import * as types from '../actions/actionTypes'\r\n\r\nvar ranDomId = () => {\r\n    return Math.floor(Math.random() * 1000000);\r\n}\r\nvar data = JSON.parse(localStorage.getItem('tasks'))\r\nvar initState = data ? data : []\r\nvar rootReducer = (state = initState, action) => {\r\n    var id = '';\r\n    var index = -1\r\n    switch (action.type) {\r\n        case types.LIST_ALL:\r\n            return state;\r\n        case types.SAVE_TASK:\r\n            var task = {\r\n                id: action.task.id,\r\n                name: action.task.name,\r\n                status: (action.task.status === 'true' || action.task.status === true) ? true : false\r\n            }\r\n            if (!task.id) {\r\n                task.id = ranDomId()\r\n                state.push(task) // [...state,task]\r\n            } else {\r\n                index = state.findIndex(x => x.id === task.id);\r\n                state[index] = task\r\n\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n        case types.UPDATE_STATUS_TASK:\r\n            id = action.id\r\n            index = state.findIndex(x => x.id === id);\r\n            // state[index].status = !state[index].status\r\n            state[index] = {\r\n                ...state[index],\r\n                status: !state[index].status\r\n            }\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state];\r\n        case types.DELETE_TASK:\r\n            var curentTasks = state.filter(x => x.id !== action.id)\r\n            // var index = state.findIndex(x => x.id === id)\r\n            state = curentTasks\r\n            localStorage.setItem('tasks', JSON.stringify(state))\r\n            return [...state]\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\nexport default rootReducer"]},"metadata":{},"sourceType":"module"}